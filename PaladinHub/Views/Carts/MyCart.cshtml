@model PaladinHub.Models.Carts.MyCartViewModel

@{
    ViewData["Title"] = "My Cart";
}

<h2 class="mb-4 text-center" style="color:#ff5fb3">My Cart</h2>

@* Anti-forgery token so AJAX can send it *@
@Html.AntiForgeryToken()

<!-- empty state (скрито, ако има продукти) -->
<div id="cart-empty" class="alert alert-info @(Model.MyProducts.Any() ? "d-none" : "")">
    Your cart is empty.
</div>

<!-- wrap на таблицата (скрит, ако е празно първоначално) -->
<div id="cart-wrap" class="@(Model.MyProducts.Any() ? "" : "d-none")">
    <table class="table table-dark table-striped align-middle">
        <thead>
            <tr>
                <th style="width:60px;"></th>
                <th>Product</th>
                <th style="width:150px;">Quantity</th>
                <th style="width:120px;">Price</th>
                <th style="width:150px;">Actions</th>
            </tr>
        </thead>
        <tbody id="cart-table-body">
            @foreach (var item in Model.MyProducts)
            {
                <tr data-id="@item.Id">
                    <td>
                        <a asp-controller="Products" asp-action="Details" asp-route-id="@item.Id">
                            <img src="@item.ImageUrl" alt="@item.Name" style="max-width:50px;height:auto;" />
                        </a>
                    </td>
                    <td>
                        <a class="text-white text-decoration-none"
                           asp-controller="Products" asp-action="Details" asp-route-id="@item.Id">
                            @item.Name
                        </a>
                    </td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Quantity">
                            <button class="btn btn-sm btn-outline-light decrease-btn" type="button">-</button>
                            <span class="px-2">@item.Quantity</span>
                            <button class="btn btn-sm btn-outline-light increase-btn" type="button">+</button>
                        </div>
                    </td>
                    <td>$@item.Price.ToString("F2")</td>
                    <td>
                        <button class="btn btn-sm btn-danger remove-btn" type="button">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div id="cart-actions" class="d-flex justify-content-between align-items-center mt-3">
        <h4>Total: <span id="cart-total">$@Model.TotalPrice.ToString("F2")</span></h4>
        <div class="d-flex gap-2">
            <button id="buy-btn" class="btn btn-success" type="button">Buy</button>
            <button id="cancel-btn" class="btn btn-danger" type="button">Cancel</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const cartTableBody = document.getElementById("cart-table-body");
            const cartTotalEl   = document.getElementById("cart-total");
            const wrapEl        = document.getElementById("cart-wrap");
            const actionsEl     = document.getElementById("cart-actions");
            const emptyEl       = document.getElementById("cart-empty");
            const antiForgery   = document.querySelector("input[name='__RequestVerificationToken']")?.value;

            function setCartEmptyUI() {
                emptyEl?.classList.remove("d-none");
                wrapEl?.classList.add("d-none");
                if (cartTotalEl) cartTotalEl.textContent = "$0.00";
                if (cartTableBody) cartTableBody.innerHTML = "";
                // кажи на глобалния код да обнови бейджа и мини-то
                document.dispatchEvent(new CustomEvent('cart:changed'));
            }

            async function sendCartAction(url, row = null) {
                try {
                    const resp = await fetch(url, {
                        method: "POST",
                        credentials: "same-origin",
                        headers: Object.assign({
                            "X-Requested-With": "XMLHttpRequest"
                        }, antiForgery ? { "RequestVerificationToken": antiForgery } : {})
                    });
                    if (!resp.ok) throw new Error("HTTP " + resp.status);
                    const data = await resp.json();

                    if (data?.ok) {
                        // тотал от сървъра
                        if (typeof data.cartTotal === "number") {
                            cartTotalEl.textContent = `$${data.cartTotal.toFixed(2)}`;
                        }

                        // премахнат ред или обновено количество
                        if (data.removed === true && row) {
                            row.remove();
                        } else if (row && typeof data.quantity === "number") {
                            const qtySpan = row.querySelector("td:nth-child(3) span");
                            if (qtySpan) qtySpan.textContent = data.quantity;
                        }

                        // празна количка – при buy/cancel (cleared), при total==0 или при нула реда
                        const tbodyEmpty = !cartTableBody || cartTableBody.querySelectorAll("tr").length === 0;
                        if (data.cleared === true || (typeof data.cartTotal === "number" && data.cartTotal <= 0) || tbodyEmpty) {
                            setCartEmptyUI();
                        }

                        // 🔔 ВИНАГИ след успех – обнови бейджа и мини-картата
                        document.dispatchEvent(new CustomEvent('cart:changed'));
                    }
                } catch (e) {
                    console.error("Cart action failed:", e);
                }
            }

            // Increase
            document.querySelectorAll(".increase-btn").forEach(btn => {
                btn.addEventListener("click", () => {
                    const row = btn.closest("tr");
                    const id  = row.dataset.id;
                    sendCartAction(`/Cart/Increase?id=${encodeURIComponent(id)}`, row);
                });
            });

            // Decrease
            document.querySelectorAll(".decrease-btn").forEach(btn => {
                btn.addEventListener("click", () => {
                    const row = btn.closest("tr");
                    const id  = row.dataset.id;
                    sendCartAction(`/Cart/Decrease?id=${encodeURIComponent(id)}`, row);
                });
            });

            // Remove
            document.querySelectorAll(".remove-btn").forEach(btn => {
                btn.addEventListener("click", () => {
                    const row = btn.closest("tr");
                    const id  = row.dataset.id;
                    sendCartAction(`/Cart/RemoveProduct?id=${encodeURIComponent(id)}`, row);
                });
            });

            // Buy
            document.getElementById("buy-btn")?.addEventListener("click", () => {
                if (confirm("Complete purchase?")) {
                    sendCartAction("/Cart/Buy");
                }
            });

            // Cancel
            document.getElementById("cancel-btn")?.addEventListener("click", () => {
                if (confirm("Cancel and clear cart?")) {
                    sendCartAction("/Cart/Cancel");
                }
            });
        });
    </script>
}

@using System.Security.Claims
@using PaladinHub.Models.Products
@model MerchandisePageViewModel

@{
    ViewData["Title"] = "Warcraft";
    var q = Model.Query;
}

@if (TempData["AddedSuccessfully"] != null)
{
    <div class="alert alert-success alert-dismissible fade show alert-floating" role="alert" id="alert">
        <i class="fa fa-check"></i>
        The product has been successfully added to your cart.
    </div>
}
@if (TempData["DeletedSuccessfully"] != null)
{
    <div class="alert alert-success alert-dismissible fade show alert-floating" role="alert" id="alert">
        <i class="fa fa-check"></i>
        The product has been successfully deleted from the database.
    </div>
}
@if (TempData["Canceled"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show alert-floating" role="alert" id="alert">
        <i class="fa fa-exclamation-circle"></i>
        <strong>The cart has been cleared!</strong>
    </div>
}
@if (TempData["Buy"] != null)
{
    <div class="alert alert-success alert-dismissible fade show alert-floating" role="alert" id="alert">
        <i class="fa fa-check"></i>
        <strong>Yay!</strong> Thank you for choosing our products.
    </div>
}

<main class="catalog-dark py-4">
    <div class="container-fluid">
        <div class="row">
            <aside class="col-12 col-lg-2 mb-4 mb-lg-0">
                <div class="filter-card p-3">
                    <h5 class="mb-3">Filters</h5>
                    <form method="get" asp-controller="Merchandise" asp-action="Merchandise">
                        <input type="hidden" name="Page" value="1" />
                        <input type="hidden" name="PageSize" value="@q.PageSize" />

                        <div class="mb-3">
                            <label class="form-label">Search</label>
                            <input name="Search" value="@q.Search" type="text" class="form-control form-control-sm" placeholder="Name, category, description…">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            @foreach (var cat in Model.AllCategories)
                            {
                                var isChecked = q.Categories != null && q.Categories.Contains(cat);
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="Categories" value="@cat" id="cat-@cat" @(isChecked ? "checked" : null)>
                                    <label class="form-check-label" for="cat-@cat">@cat</label>
                                </div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <div class="d-flex gap-2">
                                <input name="MinPrice" value="@(q.MinPrice?.ToString() ?? "")" type="number" step="0.01" class="form-control form-control-sm" placeholder="From">
                                <input name="MaxPrice" value="@(q.MaxPrice?.ToString() ?? "")" type="number" step="0.01" class="form-control form-control-sm" placeholder="To">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Sort by</label>
                            <select name="SortBy" class="form-select form-select-sm">
                                @{
                                    var current = (int)q.SortBy;
                                    var sortOptions = new[]
                                    {
                                                                (val: 0, text: "Relevance"),
                                                                (val: 1, text: "Name"),
                                                                (val: 2, text: "Price"),
                                                                (val: 3, text: "Newest"),
                                                                };
                                    foreach (var o in sortOptions)
                                    {
                                        if (current == o.val)
                                        {
                                            @:
                                            <option value="@o.val" selected>@o.text</option>
                                        }
                                        else
                                        {
                                            @:
                                            <option value="@o.val">@o.text</option>
                                        }
                                    }
                                }
                            </select>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="checkbox" name="Desc" value="true" @(q.Desc ? "checked" : null) />
                                <label class="form-check-label">Descending</label>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary w-100 btn-sm">Apply</button>
                    </form>
                </div>
            </aside>

            <section class="col-12 col-lg-10">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="m-0">Warcraft</h3>
                    <div class="d-flex align-items-center gap-2">
                        <span class="text-muted small me-2">Hi, @User.FindFirstValue(ClaimTypes.Name)</span>
                        <a asp-controller="Carts" asp-action="MyCart" class="btn btn-outline-light btn-sm">My Cart</a>
                        @if (User.IsInRole("Admin"))
                        {
                            <a asp-controller="Products" asp-action="Create" class="btn btn-success btn-sm">+ Create Product</a>
                        }
                    </div>
                </div>

                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div>
                        <strong>@Model.Products.TotalItems</strong> results
                        @if (Model.Products.TotalItems > 0)
                        {
                            var start = (Model.Products.Page - 1) * Model.Products.PageSize + 1;
                            var end = Math.Min(Model.Products.Page * Model.Products.PageSize, Model.Products.TotalItems);
                            <span class="text-muted">— showing @start–@end</span>
                        }
                    </div>
                    <div class="text-muted">Page @Model.Products.Page of @Model.Products.TotalPages</div>
                </div>

                <div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-5 g-3">
                    @if (Model.Products.Items.Count == 0)
                    {
                        <div class="col-12">
                            <div class="alert alert-info mb-0">No products match your filters.</div>
                        </div>
                    }
                    else
                    {
                        foreach (var product in Model.Products.Items)
                        {
                            <div class="col">
                                <div class="card product-card h-100">
                                    <div class="ratio ratio-1x1 product-thumb">
                                        <img src="@(string.IsNullOrWhiteSpace(product.ImageUrl) ? Url.Content("~/images/placeholder.png") : product.ImageUrl)"
                                             alt="@product.Name"
                                             class="card-img-top">
                                    </div>
                                    <div class="card-body d-flex flex-column">
                                        <div class="small text-muted">@product.Category</div>
                                        <h6 class="card-title mb-2 line-clamp-2" title="@product.Name">@product.Name</h6>
                                        @if (!string.IsNullOrWhiteSpace(product.Description))
                                        {
                                            <p class="text-truncate small">@product.Description</p>
                                        }
                                        <div class="mt-auto">
                                            <div class="price fw-semibold mb-2">$@product.Price</div>
                                        </div>
                                    </div>
                                    <div class="card-footer bg-transparent border-0 pt-0">
                                        <div class="d-grid gap-2">
                                            <a asp-controller="Carts"
                                               asp-action="AddProduct"
                                               asp-route-id="@product.Id"
                                               class="btn btn-primary btn-sm">
                                                Add to Cart
                                            </a>

                                            @if (User.IsInRole("Admin"))
                                            {
                                                <div class="d-grid gap-2">
                                                    <a asp-controller="Products"
                                                       asp-action="Edit"
                                                       asp-route-id="@product.Id"
                                                       class="btn btn-warning btn-sm">
                                                        Edit
                                                    </a>
                                                    <a asp-controller="Products"
                                                       asp-action="DeleteProduct"
                                                       asp-route-id="@product.Id"
                                                       class="btn btn-outline-danger btn-sm">
                                                        Delete
                                                    </a>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>

                @if (Model.Products.TotalPages > 1)
                {
                    <nav class="mt-4" aria-label="Pagination">
                        <ul class="pagination justify-content-center">
                            @{
                                var canPrev = Model.Products.HasPrevious;
                                var canNext = Model.Products.HasNext;

                                var routeBase = new Dictionary<string, object?>
                                {
                                    ["Search"] = q.Search,
                                    ["MinPrice"] = q.MinPrice,
                                    ["MaxPrice"] = q.MaxPrice,
                                    ["SortBy"] = (int)q.SortBy,
                                    ["Desc"] = q.Desc,
                                    ["PageSize"] = q.PageSize
                                };

                                if (q.Categories != null && q.Categories.Count > 0)
                                {
                                    int i = 0;
                                    foreach (var c in q.Categories)
                                    {
                                        routeBase[$"Categories[{i}]"] = c;
                                        i++;
                                    }
                                }

                                Func<int, object> pageRoute = pageNum =>
                                {
                                    var dict = new Dictionary<string, object?>(routeBase)
                                    {
                                        ["Page"] = pageNum
                                    };
                                    return dict;
                                };
                            }

                            <li class="page-item @(canPrev ? "" : "disabled")">
                                <a class="page-link" href="@(canPrev? Url.Action("Merchandise", pageRoute(Model.Products.Page - 1)) : "#")">Prev</a>
                            </li>

                            @{
                                int current = Model.Products.Page;
                                int total = Model.Products.TotalPages;
                                int window = 2;
                                int start = Math.Max(1, current - window);
                                int end = Math.Min(total, current + window);

                                if (start > 1)
                                {
                                    <li class="page-item"><a class="page-link" href="@Url.Action("Merchandise", pageRoute(1))">1</a></li>
                                    if (start > 2)
                                    {
                                        <li class="page-item disabled"><span class="page-link">…</span></li>
                                    }
                                }

                                for (int i = start; i <= end; i++)
                                {
                                    if (i == current)
                                    {
                                        <li class="page-item active"><span class="page-link">@i</span></li>
                                    }
                                    else
                                    {
                                        <li class="page-item"><a class="page-link" href="@Url.Action("Merchandise", pageRoute(i))">@i</a></li>
                                    }
                                }

                                if (end < total)
                                {
                                    if (end < total - 1)
                                    {
                                        <li class="page-item disabled"><span class="page-link">…</span></li>
                                    }
                                    <li class="page-item"><a class="page-link" href="@Url.Action("Merchandise", pageRoute(total))">@total</a></li>
                                }
                            }

                            <li class="page-item @(canNext ? "" : "disabled")">
                                <a class="page-link" href="@(canNext? Url.Action("Merchandise", pageRoute(Model.Products.Page + 1)) : "#")">Next</a>
                            </li>
                        </ul>
                    </nav>
                }
            </section>
        </div>
    </div>
</main>

<style>
    .catalog-dark {
        background: #0f1115;
        color: #e6e6e6;
        min-height: 100vh;
    }

    .filter-card {
        background: #171a21;
        border: 1px solid #272b35;
        border-radius: 8px;
    }

        .filter-card .form-control, .filter-card .form-select {
            background: #0f1115;
            color: #e6e6e6;
            border-color: #2a2f3a;
        }

        .filter-card .form-check-input {
            background: #0f1115;
            border-color: #2a2f3a;
        }

    .product-card {
        background: #171a21;
        border: 1px solid #272b35;
        border-radius: 10px;
        transition: transform .12s ease, box-shadow .12s ease;
        overflow: hidden;
    }

        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(0,0,0,.35);
            border-color: #2f3542;
        }

    .product-thumb img {
        object-fit: cover;
        background: #0f1115;
    }

    .price {
        color: #9bd66f;
    }

    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        min-height: 2.8em;
    }

    .alert-floating {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1080;
    }
</style>

<script>
    setTimeout(function () {
        const el = document.getElementById('alert');
        if (el) el.style.display = 'none';
    }, 1500);
</script>

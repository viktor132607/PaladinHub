@model PaladinHub.Models.Products.CreateProductViewModel
@{
    ViewData["Title"] = "Create Product";
}

<h1 class="text-center mb-4">Create Product</h1>

<form asp-controller="Products" asp-action="Create" method="post" class="mx-auto" style="max-width:720px;">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="All" class="alert alert-danger py-2" role="alert"></div>

    <div class="mb-3">
        <label asp-for="Name" class="form-label">Name</label>
        <input asp-for="Name" class="form-control" placeholder="Name..." />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Price" class="form-label">Price</label>
        <input asp-for="Price" class="form-control" type="number" step="0.01" min="0" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="ImageUrl" class="form-label">Image URL (main thumbnail)</label>
        <div class="input-group">
            <input asp-for="ImageUrl" class="form-control" placeholder="https://..." />
            <button type="button" id="btn-pick-from-first" class="btn btn-outline-secondary" title="Use first gallery image">Use 1st gallery</button>
        </div>
        <div class="form-text">Main image on cards & first in details. You can set it from the gallery below.</div>
        <span asp-validation-for="ImageUrl" class="text-danger"></span>
    </div>

    <!-- Gallery (extra images) -->
    <div class="mb-3">
        <label class="form-label">Gallery images (optional)</label>

        <div id="img-list" class="d-flex flex-column gap-2"></div>

        <div class="d-flex align-items-center gap-2 mt-2">
            <button type="button" id="btn-add-img" class="btn btn-sm btn-outline-warning">
                <i class="fa-solid fa-plus me-1"></i> Add image
            </button>
            <small class="text-muted">Order top-to-bottom is shown after the main image.</small>
        </div>
    </div>

    <div class="mb-2">
        <label class="form-label">Category</label>
        <select asp-for="Category" asp-items="Model.CategorySelectList" class="form-select">
            <option value="">-- choose --</option>
        </select>
        <span asp-validation-for="Category" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <button type="button" id="btn-add-cat" class="btn btn-sm btn-outline-warning">+ Add category</button>
    </div>

    <div id="new-cat-wrap" class="mb-3 d-none">
        <label asp-for="NewCategory" class="form-label">New category</label>
        <input asp-for="NewCategory" class="form-control" placeholder="e.g. Books" />
        <div class="form-text">If filled, it will be used instead of the selected one.</div>
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label">Description</label>
        <textarea asp-for="Description" class="form-control" rows="3" placeholder="Optional..."></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <a asp-controller="Merchandise" asp-action="Merchandise" class="btn btn-outline-light me-md-2">Cancel</a>
        <button type="submit" class="btn btn-warning fw-bold px-4">Create</button>
    </div>
</form>

<style>
    .img-row .thumb {
        width: 48px;
        height: 48px;
        object-fit: cover;
    }

    .img-row.active-main {
        border: 1px solid #f59f00;
        box-shadow: 0 0 0 2px rgba(245,159,0,.15) inset;
    }

    .img-row .main-badge {
        font-size: .65rem;
    }
</style>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Toggle new category field
        (function () {
            const btn = document.getElementById('btn-add-cat');
            const wrap = document.getElementById('new-cat-wrap');
            if (btn && wrap) btn.addEventListener('click', () => wrap.classList.toggle('d-none'));
        })();

        // ---- Gallery images dynamic list + choose main thumbnail ----
        (function () {
            const list = document.getElementById('img-list');
            const addBtn = document.getElementById('btn-add-img');
            const pickFirstBtn = document.getElementById('btn-pick-from-first');
            const mainInput = document.getElementById('ImageUrl'); // asp-for id
            const placeholder = '@Url.Content("~/images/placeholder.png")';

            function renderRow(url = '') {
                const row = document.createElement('div');
                row.className = 'card bg-dark border-secondary p-2 img-row';

                row.innerHTML = `
                  <div class="d-flex align-items-center gap-2">
                    <span class="text-muted" title="Reorder">
                      <i class="fa-solid fa-grip-lines"></i>
                    </span>

                    <div class="position-relative">
                      <img class="thumb rounded" src="${url || placeholder}">
                      <span class="badge bg-warning text-dark position-absolute top-0 start-0 main-badge d-none">Main</span>
                    </div>

                    <input class="form-control form-control-sm flex-grow-1 img-url" placeholder="https://..." value="${url}">
                    <input type="hidden" class="img-sort" value="0">

                    <div class="btn-group btn-group-sm">
                      <button type="button" class="btn btn-outline-secondary btn-up" title="Move up">▲</button>
                      <button type="button" class="btn btn-outline-secondary btn-down" title="Move down">▼</button>
                    </div>

                    <button type="button" class="btn btn-outline-warning btn-sm btn-make-main" title="Set as main">
                      <i class="fa-solid fa-star"></i>
                    </button>

                    <button type="button" class="btn btn-outline-danger btn-sm btn-remove" title="Remove">
                      <i class="fa-solid fa-trash"></i>
                    </button>
                  </div>
                `;
                list.appendChild(row);
                bindRow(row);
                reindex();
                updateMainUI();
            }

            function bindRow(row) {
                const urlInput = row.querySelector('.img-url');
                const thumb = row.querySelector('.thumb');
                const btnRemove = row.querySelector('.btn-remove');
                const btnUp = row.querySelector('.btn-up');
                const btnDown = row.querySelector('.btn-down');
                const btnMain = row.querySelector('.btn-make-main');

                urlInput.addEventListener('input', () => {
                    const v = urlInput.value.trim();
                    thumb.src = v || placeholder;
                    updateMainUI(); // ако съвпадне с main, маркирай
                });

                btnRemove.addEventListener('click', () => {
                    const wasMain = isRowMain(row);
                    row.remove();
                    reindex();
                    if (wasMain) updateMainUI(); // ще падне маркировката; mainInput си остава каквото е
                });

                btnUp.addEventListener('click', () => {
                    const prev = row.previousElementSibling;
                    if (prev) { list.insertBefore(row, prev); reindex(); }
                });

                btnDown.addEventListener('click', () => {
                    const next = row.nextElementSibling;
                    if (next) { list.insertBefore(next, row); reindex(); }
                });

                btnMain.addEventListener('click', () => {
                    const v = urlInput.value.trim();
                    if (!v) return;
                    if (mainInput) mainInput.value = v;
                    updateMainUI();
                });
            }

            function isRowMain(row) {
                const urlInput = row.querySelector('.img-url');
                const main = (mainInput?.value || '').trim();
                return urlInput && urlInput.value.trim() === main && !!main;
            }

            function updateMainUI() {
                const rows = Array.from(list.querySelectorAll('.img-row'));
                const main = (mainInput?.value || '').trim();
                rows.forEach(row => {
                    const badge = row.querySelector('.main-badge');
                    const url = row.querySelector('.img-url')?.value.trim() || '';
                    const active = main && url === main;
                    row.classList.toggle('active-main', active);
                    if (badge) badge.classList.toggle('d-none', !active);
                });
            }

            function reindex() {
                const rows = Array.from(list.querySelectorAll('.img-row'));
                rows.forEach((row, i) => {
                    const url = row.querySelector('.img-url');
                    const sort = row.querySelector('.img-sort');
                    if (url)  url.name  = `Images[${i}].Url`;
                    if (sort) { sort.name = `Images[${i}].SortOrder`; sort.value = i; }
                });
            }

            if (addBtn) addBtn.addEventListener('click', () => renderRow());
            if (pickFirstBtn) pickFirstBtn.addEventListener('click', () => {
                const first = list.querySelector('.img-row .img-url');
                if (first && mainInput) {
                    const v = first.value.trim();
                    if (v) mainInput.value = v;
                    updateMainUI();
                }
            });
            if (mainInput) mainInput.addEventListener('input', updateMainUI);

            // optionally: add an empty row by default
            // renderRow();
        })();
    </script>
}
